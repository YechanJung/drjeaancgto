{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_RESET } from \"../constants/userConstants\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const response = await fetch(\"/api/users/login/\", {\n      method: \"POST\",\n      headers: config.headers,\n      body: JSON.stringify({\n        username: email,\n        password: password\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: USER_LOGIN_FAIL,\n        payload: data && data.message ? data.message : \"Login failed\"\n      });\n    }\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const response = await fetch(\"/api/users/register/\", {\n      method: \"POST\",\n      headers: config.headers,\n      body: JSON.stringify({\n        name: name,\n        email: email,\n        password: password\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data\n      });\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n    } else {\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        payload: data && data.message ? data.message : \"Registration failed\"\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const response = await fetch(`/api/users/${id}/`, config);\n    const data = await response.json();\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const response = await fetch(`/api/users/profile/update/`, {\n      method: \"PUT\",\n      headers: config.headers,\n      body: JSON.stringify(user)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: USER_UPDATE_PROFILE_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: USER_UPDATE_PROFILE_FAIL,\n        payload: data && data.message ? data.message : \"Update failed\"\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_RESET","login","email","password","dispatch","type","config","headers","response","fetch","method","body","JSON","stringify","username","data","json","ok","payload","message","localStorage","setItem","error","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","updateUserProfile","user"],"sources":["/Users/jung-yechan/Documents/coding/re/drjeaancgto/fe/src/actions/userActions.js"],"sourcesContent":["import {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  USER_REGISTER_FAIL,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_UPDATE_PROFILE_RESET,\n} from \"../constants/userConstants\";\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const response = await fetch(\"/api/users/login/\", {\n      method: \"POST\",\n      headers: config.headers,\n      body: JSON.stringify({ username: email, password: password }),\n    });\n\n    const data = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data,\n      });\n    } else {\n      dispatch({\n        type: USER_LOGIN_FAIL,\n        payload: data && data.message ? data.message : \"Login failed\",\n      });\n    }\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({ type: USER_LOGOUT });\n};\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const response = await fetch(\"/api/users/register/\", {\n      method: \"POST\",\n      headers: config.headers,\n      body: JSON.stringify({ name: name, email: email, password: password }),\n    });\n\n    const data = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data,\n      });\n\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data,\n      });\n\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n    } else {\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        payload: data && data.message ? data.message : \"Registration failed\",\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const response = await fetch(`/api/users/${id}/`, config);\n\n    const data = await response.json();\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const response = await fetch(`/api/users/profile/update/`, {\n      method: \"PUT\",\n      headers: config.headers,\n      body: JSON.stringify(user),\n    });\n\n    const data = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: USER_UPDATE_PROFILE_SUCCESS,\n        payload: data,\n      });\n    } else {\n      dispatch({\n        type: USER_UPDATE_PROFILE_FAIL,\n        payload: data && data.message ? data.message : \"Update failed\",\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}